// TODO: add plugins
// - https://github.com/mskelton/eslint-plugin-sort/issues/53
// TODO: add default parameters tsdoc comments
// TODO: consider consistent aliasing, create vs add/upload, StorageHostname vs storageEndpoint, all those region aliases
// - then remove them from intentionallyNotExported
{
  "extends": [
    "xo",
    "xo-typescript",
    "xo-typescript/space",
    "plugin:sort/recommended",
    "prettier"
  ],
  "ignorePatterns": ["**/dist/**", "**/docs/**"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "root": true,
  "rules": {
    // example https://typescript-eslint.io/rules/ban-types/
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          // un-ban a type that is banned by default
          "null": false
        },
        "extendDefaults": true
      }
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    // default options for @typescript-eslint/naming-convention https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.md#options
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      // example https://typescript-eslint.io/rules/naming-convention/#how-does-the-rule-evaluate-a-names-format
      {
        "selector": "default",
        "format": ["PascalCase"],
        "filter": {
          "regex": "AccessKey",
          "match": true
        }
      },
      // example https://stackoverflow.com/a/74818459
      {
        "selector": "property",
        "format": null,
        "filter": {
          "regex": "(GET|POST|PUT|PATCH|DELETE) /.*",
          "match": true
        }
      },
      {
        "selector": "property",
        "format": null,
        "filter": {
          "regex": "content-type",
          "match": true
        }
      },
      // example https://typescript-eslint.io/rules/naming-convention/#allowed-selectors-modifiers-and-types
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "class",
        "format": ["PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      // TODO: remove and normalize properties returned from the API
      // - use https://github.com/sindresorhus/camelcase-keys#stoppaths
      // - can also convert keys back to pascal case
      // - may still fail for EnableGeoZoneASIA (perhaps only change first letter?)
      // - drop commonjs https://github.com/egoist/tsup/issues/628
      {
        "selector": "typeProperty",
        "format": ["camelCase", "PascalCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      }
    ],
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    // TODO: remove https://eslint.org/docs/latest/rules/no-warning-comments
    "no-warning-comments": "off",
    "sort/string-enums": "error",
    // sort groups default https://github.com/mskelton/eslint-plugin-sort/blob/main/src/index.ts
    // sort typeOrder https://github.com/mskelton/eslint-plugin-sort/blob/HEAD/docs/rules/imports.md
    "sort/exports": [
      "error",
      {
        "groups": [
          { "type": "default", "order": 50 },
          { "type": "sourceless", "order": 40 },
          { "regex": "^\\.+\\/", "order": 30 },
          { "type": "dependency", "order": 10 },
          { "type": "other", "order": 20 }
        ],
        "typeOrder": "first"
      }
    ],
    "sort/imports": [
      "error",
      {
        "groups": [
          { "type": "side-effect", "order": 10 },
          { "regex": "^\\.+\\/", "order": 40 },
          { "type": "dependency", "order": 20 },
          { "type": "other", "order": 30 }
        ],
        "typeOrder": "first"
      }
    ],
    "sort/string-unions": "error",
    "sort/type-properties": "error"
  }
}
